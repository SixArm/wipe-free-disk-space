#!/bin/sh
#
# Wipe free disk space by overwriting it with zero bytes.
#
# Syntax:
#
#   wipe-free-disk-space
#
# Cautions:
#
#   * This command may take a long time to run.
#
#   * If you're on a battery-powered system, e.g. a laptop,
#     it's wise to switch to using a plug-in power adapter
#     before running this command.
#
# This implementation does these steps:
#
#   1. Create a small temp file.
#   2. Create a large temp file that fills up all the free space.
#   3. Delete the small temp file immediately so we have some free space.
#   4. Delete the large temp file.
#
# See http://superuser.com/questions/19326/how-to-wipe-free-disk-space-in-linux
#
# Version: 2.0.0
# Created: 2013-03-11
# Updated: 2015-01-25
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
# License: GPL
##
set -euf

################################################################################
#
# Customize this section for your own system.
#
###

# To get the best security, we use the full path to these commands.
# You may want and/or need to cusomtize these for your system.
#
dd='/bin/dd'
shred='/usr/bin/shred -z'
sync='/bin/sync; sleep 60; /bin/sync'
rm='/bin/rm'

# The input source can be any byte generator, such as:
#
#   * /dev/zero which fills with all zeros (which is fast )
#   * /dev/urandom which fills with random bytes (which is slow)
#
# If you use /dev/urandom:
#
#   * the temp files and free disk space will be purely random data.
#
#   * a forensics tool may presume the blank space is encrypted data.
#
#  * there's no need to use shred; the shred would be redundant.
#
input_src=/dev/zero

# If you want to use _shred_ for more security, set _shred_flag_ to true.
# This causes the temp files to be shredded before being removed.
#
# If you use _shred_ then you do not need to use /dev/urandom or similar,
# because _shred_ effectively does the same kind of random file filling.
#
shred_flag=false

# We use two temporary files.
# Name these whatever you want.
#
small_file=wipe-free-disk-space-small-temp-file.bin
large_file=wipe-free-disk-space-large-temp-file.bin

################################################################################

set -o xtrace

if ($shred_flag); then

    # Create the small file.
    $dd if=$input_src of=$small_file bs=1024 count=102400
    $sync

    # Shred the small file, even before we create the large file,
    # because we want to delete the small file as soon as possible.
    $shred $small_file

    # Create the large file that fills the disk.
    $dd if=$input_src of=$large_file bs=1024
    $sync

    # As soon as possible, remove the small file so we regain some space.
    $rm $small_file

    # Shred the large file then remove it.
    $shred $large_file
    $sync
    $rm $large_file

else

    # Create the small file then the large file that fills the disk.
    $dd if=$input_src of=$small_file bs=1024 count=102400
    $dd if=$input_src of=$large_file bs=1024
    $sync

    # Remove the small file to regain some space, then remove the large file.
    $rm $small_file
    $rm $large_file

fi
